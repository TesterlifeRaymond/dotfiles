" No vi-compatible
"
set nocompatible

" Raymond Vimrc Profile

let g:VIM_HOME = expand('~/.vim')

" Vim-plug installation
    " if vim-plug file (by default, it's VIM_HOME/autoload/plug.vim) is
" not exist, then download and install it from github.
let s:vim_plug_path = g:VIM_HOME.'/autoload/plug.vim'
if !filereadable(s:vim_plug_path)
    echo "Installing Vim-plug ..."
    echo ""
    let s:vim_plug_git = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    execute "!curl -fLo ".s:vim_plug_path." --create-dirs ".s:vim_plug_git
endif

let s:vim_plugged_path = g:VIM_HOME.'/plugged'

" Plugins Table
call plug#begin(s:vim_plugged_path)

" markdown
Plug 'iamcco/mathjax-support-for-mkdp'
Plug 'iamcco/markdown-preview.vim'

" colorscheme
" Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'rakr/vim-two-firewatch'

" supertab
Plug 'ervandew/supertab'
" tabnine
" Plug 'codota/tabnine-vim'
" uml 
Plug 'scrooloose/vim-slumlord'
Plug 'aklt/plantuml-syntax'
Plug 'skanehira/preview-uml.vim'
" pairs
Plug 'jiangmiao/auto-pairs'
"vim启动页面修改
Plug 'mhinz/vim-startify'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'dgryski/vim-godef'
Plug 'jstemmer/gotags'
Plug 'mdempsky/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }

" file tree browser
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
Plug 'Yggdroot/LeaderF'
" snippets
Plug 'SirVer/ultisnips'
Plug 'vim-airline/vim-airline'
Plug 'morhetz/gruvbox'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'rbong/vim-flog'
Plug 'Yggdroot/indentLine'

" go
Plug 'fatih/vim-go', { 'do': 'GoUpdateBinaries' }

call plug#end()

" Automatic installation.
function! s:is_need_install()
    for l:plug_name in g:plugs_order
        let l:plug_path = s:vim_plugged_path.'/'.l:plug_name
        if !isdirectory(l:plug_path)
            return 1
        endif
    endfor
endfunction

if s:is_need_install()
    echom "Found new plugin(s) need to install."
    :PlugInstall
endif


" Allow plugins by file type
filetype plugin on
filetype indent on

" Use tem colors
set t_Co=256
syntax enable


" tagbar
let g:tagbar_ctags_bin='/usr/local/bin/ctags'
let g:tagbar_right=1

" Ayu
" let ayucolor="light"  " for light version of theme
" let ayucolor="mirage" " for mirage version of theme
" let ayucolor="dark"   " for dark version of theme

"colorscheme two-firewatch
"colorscheme base16-ocean
"colorscheme gruvbox

"" gui transparent
if has("gui_running")
    let g:gruvbox_contrast_dark="hard"
    set background=dark
    set guioptions-=r "
    set guioptions-=b "
    set guioptions-=L "
    " set guifont=SFMono\ Nerd\ Font:h14
    set guifont=Monaco\ Nerd\ Font\ Mono:h15
    set background=dark " or light if you prefer the light version
    colorscheme two-firewatch
    " colorscheme desert
    let g:two_firewatch_italics=1
    let g:airline_theme='twofirewatch' " if you have Airline installed and want the associated theme
    set termguicolors     " enable true colors support
    set shellcmdflag=-ic
    set transparency=10
    set lines=50 columns=200
    "let g:two_firewatch_italics=1
    " let g:airline_theme='twofirewatch'
    " let g:airline#extensions#tabline#enabled = 0
endif

" Keep 3 lines when scrolling
set scrolloff=8

" Syntax highlight on
syntax on

" Always show status bar
set ls=2

" Incremental search
set incsearch
set hlsearch

" Tabs and spaces handling
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" Key Mappings {
let mapleader=' '

" mouse
set mouse=a
let mouseFlag =1
function! SetMouse()
    if g:mouseFlag == 1
        let g:mouseFlag=0
        set mouse=
        echo "mouse off"
    else
        let g:mouseFlag =1
        set mouse=a
        echo "mouse on"
    endif
endfunction


" set escape to jk
nnoremap <leader>\ :vs<CR>
nnoremap <leader>- :sp<CR>

" general
nnoremap <silent> <leader>gq :xa<CR>
nnoremap <silent> <leader>ge :edit $MYVIMRC<CR>
nnoremap <silent> <leader>gr :source $MYVIMRC<CR>
nnoremap <silent> <leader>q :q!<CR>

" file
nnoremap <silent> <leader>fs :w<CR>
nnoremap <silent> <leader>fb :NERDTreeToggle<CR>

" buffer
nnoremap <silent> <leader>jf :%!python -c "import json,sys,collections,re; sys.stdout.write(re.sub(r\"\\\u[0-9a-f]{4}\", lambda m:m.group().decode(\"unicode_escape\").encode(\"utf-8\"),json.dumps(json.load(sys.stdin, object_pairs_hook=collections.OrderedDict), indent=2)))"<CR>
nnoremap <silent> <leader>pdb :!python3 -m pdb %<CR>
nnoremap <silent> <leader>tg :TagbarToggle<CR>

" window
nnoremap <C-h> <C-w><C-h>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>
nnoremap <C-c> <C-w><C-c>
nnoremap <C-q> <C-o>
" nnoremap <C-o> <C-w><C-o>

" automatic open nerdtree when start up vim with a directory.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" automatic close nerdtree when only nerdtree window.
au bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
au bufenter * if 0 == len(filter(range(1, winnr('$')), 'empty(getbufvar(winbufnr(v:val), "&bt"))')) | qa! | endif
map <C-x> :call SetMouse() <CR>

" PEP8
set tabstop=4
set softtabstop=4
set shiftwidth=4
" set textwidth=90
set autoindent
set smartindent

" When writing a buffer.
" call neomake#configure#automake('w')
" When writing a buffer, and on normal mode changes (after 750ms).
" call neomake#configure#automake('nw', 750)
" When reading a buffer (after 1s), and when writing.
" call neomake#configure#automake('rw', 1000)
set clipboard=unnamed
set backspace=indent,eol,start
set nowrap
set encoding=UTF-8
set langmenu=zh_CN.UTF-8
let g:indentLine_color_term = 239
set noeb

set completeopt=longest,menuone
let g:airline#themes#flatlandia#palette=0

" let g:spacegray_use_italics = 1
" let g:spacegray_underline_search = 1
" let g:spacegray_low_contrast = 1

" nerdtree icons conf
let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1
let g:webdevicons_enable_ctrlp = 1
let g:tagbar_autopreview = 1

let NERDTreeIgnore=['\.pyc','\~$','\.swp']
" 打开 vim 文件及显示书签列表
" let NERDTreeShowBookmarks=2

" 在终端启动vim时，共享NERDTree
" let g:nerdtree_tabs_open_on_console_startup=1
" 打开 vim 文件及显示书签列表
let NERDTreeShowBookmarks=2

" 在终端启动vim时，共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

"let g:NERDTreeIndicatorMapCustom = {
"    \ "Modified"  : "✹",
"    \ "Staged"    : "✚",
"    \ "Untracked" : "✭",
"    \ "Renamed"   : "➜",
"    \ "Unmerged"  : "═",
"    \ "Deleted"   : "✖",
"    \ "Dirty"     : "✗",
"    \ "Clean"     : "✔︎",
"    \ 'Ignored'   : '☒',
"    \ "Unknown"   : "?"
"    \ }


nnoremap <leader>bp :GoDebugBreakpoint<CR>
nnoremap <leader>np :GoDebugContinue<CR>
""""""""""""""""""""""""""""""
"Leaderf settings
""""""""""""""""""""""""""""""
" Show icons, icons are shown by default
let g:Lf_ShowDevIcons = 1
" For GUI vim, the icon font can be specify like this, for example
let g:Lf_PopupPalette = {
    \  'light': {
    \      'Lf_hl_match': {
    \                'gui': 'NONE',
    \                'font': 'NONE',
    \                'guifg': 'NONE',
    \                'guibg': '#303136',
    \                'cterm': 'NONE',
    \                'ctermfg': 'NONE',
    \                'ctermbg': '236'
    \              },
    \      'Lf_hl_cursorline': {
    \                'gui': 'NONE',
    \                'font': 'NONE',
    \                'guifg': 'NONE',
    \                'guibg': '#303136',
    \                'cterm': 'NONE',
    \                'ctermfg': 'NONE',
    \                'ctermbg': '236'
    \              },
    \      }
    \  }
let g:Lf_PreviewInPopup = 1
let g:Lf_WindowPosition = 'popup'
let g:Lf_WindowHeight = 0.30

let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font':"Monaco\ Nerd\ Font\ Mono" }

" let g:Lf_PreviewResult = { 'File': 1}
let g:Lf_WildIgnore = {'dir':['.svn','.git','target','node_modules'],'file':['*.log']}
"文件搜索
nnoremap <silent><nowait> sf  :<C-u>LeaderfFile<cr>

"历史打开过的文件
nnoremap <silent> <Leader>m :Leaderf mru<CR>

"Buffer
nnoremap <silent><nowait> sb  :<C-u>LeaderfBuffer<cr>

"函数搜索（仅当前文件里）
" nnoremap <silent><nowait> lf :<C-u>LeaderfFunction<cr>

"模糊搜索，很强大的功能，迅速秒搜
nnoremap <silent><nowait> rg :<C-u>Leaderf rg<cr>

" set noswapfile
set directory=/tmp

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" -------------------------------------------------------------------------------------------------
" coc.nvim default settings
" -------------------------------------------------------------------------------------------------

" if hidden is not set, TextEdit might fail.
set hidden
" Better display for messages
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Show all diagnostics
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)
" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)
" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <leader>x for convert visual selected code to snippet
xmap <leader>x  <Plug>(coc-convert-snippet)

" let g:coc_snippet_next = '<tab>'
let NERDTreeShowBookmarks=1

" supertab
let g:go_version_warning = 2
let g:SuperTabRetainCompletionType = 0
let g:SuperTabDefaultCompletionType="<C-x><C-o>"

" vim-go custom mappings
au FileType go nmap <Leader>r <Plug>(go-referrers)

" set completeopt=longest,menuone
" let g:go_fmt_autosave = 2
au FileType go nmap <Leader>s <Plug>(coc-implementation)
" au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>e <Plug>(go-rename)


set completeopt=longest,menuone
let g:go_fmt_autosave = 1
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
let g:go_fmt_command = "goimports"
let g:airline#themes#flatlandia#palette=0

" vim-go conf
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_types = 1
" Go 结构体成员高亮
let g:go_highlight_fields = 1
" Go 函数名高亮
let g:go_highlight_function_calls = 1

set nu
nohl
highlight Comment ctermfg=gray guifg=#a1a3a6
