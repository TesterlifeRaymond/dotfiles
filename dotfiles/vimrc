" Cano's Vim Config Author: Cano
" Email: gcanoxl@gmail.com
"
" This config is lightweight, but smart development environment
" for Web front-end(HTML, CSS, JavaScript), python languages.
"
" You should install all tools of the list before use this config.
" List: git, curl, ctags, jedi, ipykernel, jupyter_client

" Enviroment initialization (compatible with neovim)
let g:VIM_HOME = expand('~/.vim')


if has('nvim')
    let g:VIM_HOME = expand('~/.config/nvim')
endif

" Vim-plug installation
" if vim-plug file (by default, it's VIM_HOME/autoload/plug.vim) is
" not exist, then download and install it from github.
let s:vim_plug_path = g:VIM_HOME.'/autoload/plug.vim'
if !filereadable(s:vim_plug_path)
    echo "Installing Vim-plug ..."
    echo ""
    let s:vim_plug_git = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    execute "!curl -fLo ".s:vim_plug_path." --create-dirs ".s:vim_plug_git
endif
let s:vim_plugged_path = g:VIM_HOME.'/plugged'

" Plugins Table
call plug#begin(s:vim_plugged_path)

" code browser
" Plug 'mattn/emmet-vim'

" file tree browser
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'Xuyuanp/nerdtree-git-plugin'

" python code completion
Plug 'davidhalter/jedi-vim', {'for': 'python'}
" Syntax Checker
Plug 'neomake/neomake'
" vim-go
" Plug 'fatih/vim-go'
" Plug 'nsf/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }

" gist-vim
Plug 'lambdalisue/vim-gista'

" snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" colorscheme
Plug 'ericyan/vim-ocean'
" Plug 'altercation/vim-colors-solarized'
Plug 'ayu-theme/ayu-vim' " or other package manager
Plug 'hzchirs/vim-material'
Plug 'vim-airline/vim-airline'
" Plug 'morhetz/gruvbox'

" java
" Plug 'artur-shaik/vim-javacomplete2'

" other
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
Plug 'terryma/vim-smooth-scroll'
Plug 'vim-scripts/todo-vim'
Plug 'tpope/vim-git'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'gregsexton/gitv', {'on': ['Gitv']}
Plug 'scrooloose/nerdcommenter'
Plug 'Yggdroot/indentLine'
call plug#end()

" Automatic installation.
function! s:is_need_install()
    for l:plug_name in g:plugs_order
        let l:plug_path = s:vim_plugged_path.'/'.l:plug_name
        if !isdirectory(l:plug_path)
            return 1
        endif
    endfor
endfunction
if s:is_need_install()
    echom "Found new plugin(s) need to install."
    :PlugInstall
endif

" No vi-compatible
set nocompatible

" Allow plugins by file type
filetype plugin on
filetype indent on

" Use tem colors
set t_Co=256
syntax enable
hi Comment cterm=italic


" tagbar
let g:tagbar_left=1
let g:tagbar_ctags_bin='/usr/local/bin/ctags'
nnoremap <silent> <leader>tg :TagbarToggle<CR>

" Ayu
" let ayucolor="light"  " for light version of theme
" let ayucolor="mirage" " for mirage version of theme
"let ayucolor="dark"   " for dark version of theme

set termguicolors     " enable true colors support


if has('gui_running')
    " colorscheme codeburn
    colorscheme base16-ocean
    " colorscheme ayu
else
    set background=dark
    colorscheme ayu
    " colorscheme codeburn
endif

"" gui transparent
if has("gui_running")
    set shellcmdflag=-ic
    set transparency=10
endif

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='material'

" Show line numbers
let g:neomake_python_enabled_makers = ['flake8']
let g:neomake_python_flake8_maker = {
  \ 'exe': '/usr/local/bin/flake8',
  \ 'args': ['--format=default'],
  \ 'errorformat':
      \ '%E%f:%l: could not compile,%-Z%p^,' .
      \ '%A%f:%l:%c: %t%n %m,' .
      \ '%A%f:%l: %t%n %m,' .
      \ '%-G%.%#',
  \ 'postprocess': function('neomake#makers#ft#python#Flake8EntryProcess')
  \ }



" Keep 3 lines when scrolling
set scrolloff=8

" Syntax highlight on
syntax on

" Always show status bar
set ls=2

" Incremental search
set incsearch
set hlsearch

" Tabs and spaces handling
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" Tab length for different file type.
autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType css setlocal shiftwidth=4 tabstop=4 softtabstop=4
autocmd FileType javascript setlocal shiftwidth=4 tabstop=4 softtabstop=4

" Key Mappings {
let mapleader=' '

" mouse
set mouse=a
let mouseFlag =1
function! SetMouse()
    if g:mouseFlag == 1
        let g:mouseFlag=0
        set mouse=
        echo "mouse off"
    else
        let g:mouseFlag =1
        set mouse=a
        echo "mouse on"
    endif
endfunction

" set escape to jk
nmap <C-]> :TODOToggle<CR>
nmap <C-r> :!python3 %<CR>
" Split fast
nnoremap <leader>\ :vs<CR>
nnoremap <leader>- :sp<CR>

" general
nnoremap <silent> <leader>gq :xa<CR>
nnoremap <silent> <leader>ge :edit $MYVIMRC<CR>
nnoremap <silent> <leader>gr :source $MYVIMRC<CR>
nnoremap <silent> <leader>q :q! <CR>

" file
nnoremap <silent> <leader>fs :w<CR>
nnoremap <silent> <leader>fb :NERDTreeToggle<CR>

" buffer
nnoremap <silent> <leader>jf :%!python3 -m json.tool<CR>
nnoremap <silent> <leader>pdb :!python3 -m pdb %

" window
nnoremap <C-h> <C-w><C-h>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>
nnoremap <C-c> <C-w><C-c>
nnoremap <C-q> <C-o>
" nnoremap <C-o> <C-w><C-o>

" code
nnoremap <silent> <leader>sc :LeaderfBufTagAll<CR>
nnoremap <silent> <leader>sf :LeaderfFunction<CR>
nnoremap <silent> <leader>cb :TagbarToggle<CR>


" automatic open nerdtree when start up vim with a directory.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" automatic close nerdtree when only nerdtree window.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Jedi
nmap <C-t> :call jedi#goto()<CR>
nmap <C-n> :call jedi#usages()<CR>
nmap <C-e> :call jedi#show_documentation()<CR>
map <C-x> :call SetMouse() <CR>
nmap <C-i> :Gitv <CR>

" PEP8

set tabstop=4
set softtabstop=4
set shiftwidth=4
set textwidth=99
set expandtab
set autoindent
" set fileformat=unix
" When writing a buffer.
call neomake#configure#automake('w')
" When writing a buffer, and on normal mode changes (after 750ms).
call neomake#configure#automake('nw', 750)
" When reading a buffer (after 1s), and when writing.
call neomake#configure#automake('rw', 1000)
set guioptions-=r " 隐藏右侧滚动条
set guioptions-=b " 隐藏底部滚动条
set guioptions-=L " 隐藏左侧滚动条
set guifont=SF\ MONO:h13
set clipboard=unnamed
set nohlsearch
set backspace=indent,eol,start
set nowrap
set nu
set encoding=utf-8
set langmenu=zh_CN.UTF-8
"let g:indentLine_setColors = 0
let g:indentLine_color_term = 239
set noeb
"hi Normal     ctermbg=NONE guibg=NONE
"hi LineNr     ctermbg=NONE guibg=NONE
"hi SignColumn ctermbg=NONE guibg=NONE
let g:go_version_warning = 2
let g:SuperTabDefaultCompletionType = "<c-n>"
let g:SuperTabDefaultCompletionType="<C-x><C-o>"

noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
