" Raymond Vimrc Profile

let g:VIM_HOME = expand('~/.vim')

" Vim-plug installation
" if vim-plug file (by default, it's VIM_HOME/autoload/plug.vim) is
" not exist, then download and install it from github.
let s:vim_plug_path = g:VIM_HOME.'/autoload/plug.vim'
if !filereadable(s:vim_plug_path)
    echo "Installing Vim-plug ..."
    echo ""
    let s:vim_plug_git = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    execute "!curl -fLo ".s:vim_plug_path." --create-dirs ".s:vim_plug_git
endif

let s:vim_plugged_path = g:VIM_HOME.'/plugged'

" Plugins Table
call plug#begin(s:vim_plugged_path)

" Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" supertab
Plug 'ervandew/supertab'
" pairs
Plug 'jiangmiao/auto-pairs'
" youdao
Plug 'ianva/vim-youdao-translater'

" file tree browser
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'Xuyuanp/nerdtree-git-plugin'

" python code completion
Plug 'davidhalter/jedi-vim', {'for': 'python'}

" Syntax Checker
Plug 'neomake/neomake'
Plug 'Shougo/neocomplete.vim'

" vim-go
Plug 'dgryski/vim-godef'
Plug 'jstemmer/gotags'
Plug 'fatih/vim-go', { 'tag': '*' }
Plug 'Blackrush/vim-gocode'
" Plug 'mdempsky/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }

" snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" colorscheme
" Plug 'flazz/vim-colorschemes'
" Plug 'ryanoasis/nerd-fonts'
" Plug 'ericyan/vim-ocean'
" Plug 'altercation/vim-colors-solarized'
" Plug 'hzchirs/vim-material'
Plug 'vim-airline/vim-airline'
Plug 'morhetz/gruvbox'
Plug 'jistr/vim-nerdtree-tabs'

" other
Plug 'terryma/vim-smooth-scroll'
Plug 'vim-scripts/todo-vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
" Plug 'gregsexton/gitv', {'on': ['Gitv']}
Plug 'Yggdroot/indentLine'
Plug 'ajh17/spacegray.vim'
"Plug 'ryanoasis/vim-devicons'


call plug#end()

" Automatic installation.
function! s:is_need_install()
    for l:plug_name in g:plugs_order
        let l:plug_path = s:vim_plugged_path.'/'.l:plug_name
        if !isdirectory(l:plug_path)
            return 1
        endif
    endfor
endfunction

if s:is_need_install()
    echom "Found new plugin(s) need to install."
    :PlugInstall
endif

" No vi-compatible
set nocompatible

" Allow plugins by file type
filetype plugin on
filetype indent on

nmap <C-t> :call jedi#goto()<CR>
nmap <C-n> :call jedi#usages()<CR>
nmap <C-e> :call jedi#show_documentation()<CR>

" Use tem colors
set t_Co=256
syntax enable
hi Comment cterm=italic


" tagbar
let g:tagbar_ctags_bin='/usr/local/bin/ctags'
let g:tagbar_right=1

" Ayu
" let ayucolor="light"  " for light version of theme
" let ayucolor="mirage" " for mirage version of theme
"let ayucolor="dark"   " for dark version of theme


"colorscheme base16-ocean
"colorscheme angr
"colorscheme hybrid
"colorscheme obsidian2
"colorscheme spacegray
"colorscheme Atelier_PlateauDark
"colorscheme Tomorrow-Night

"" gui transparent
if has("gui_running")
    let g:gruvbox_contrast_dark="hard"
    set background=light
    colorscheme gruvbox
    " colorscheme spacegray
    set guioptions-=r "
    set guioptions-=b "
    set guioptions-=L "
    set guifont=SF\ MONO\ Medium\ Italic:h15
    "set guifont=SFMono\ Font:h14
    set termguicolors     " enable true colors support
    set shellcmdflag=-ic
    set transparency=10
endif

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='gruvbox'

" go fmt
" au BufNewFile,BufRead *.go set filetype=go
"autocmd BufWritePre *.go :Fmt


let g:neomake_python_enabled_makers = ['flake8']
let g:neomake_python_flake8_maker = {
  \ 'exe': '/usr/local/bin/flake8',
  \ 'args': ['--format=default'],
  \ 'errorformat':
      \ '%E%f:%l: could not compile,%-Z%p^,' .
      \ '%A%f:%l:%c: %t%n %m,' .
      \ '%A%f:%l: %t%n %m,' .
      \ '%-G%.%#',
  \ 'postprocess': function('neomake#makers#ft#python#Flake8EntryProcess')
  \ }



" Keep 3 lines when scrolling
set scrolloff=8

" Syntax highlight on
syntax on

" Always show status bar
set ls=2

" Incremental search
set incsearch
set hlsearch

" Tabs and spaces handling
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" Tab length for different file type.
autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType css setlocal shiftwidth=4 tabstop=4 softtabstop=4
autocmd FileType javascript setlocal shiftwidth=4 tabstop=4 softtabstop=4

" Key Mappings {
let mapleader=' '

" mouse
set mouse=a
let mouseFlag =1
function! SetMouse()
    if g:mouseFlag == 1
        let g:mouseFlag=0
        set mouse=
        echo "mouse off"
    else
        let g:mouseFlag =1
        set mouse=a
        echo "mouse on"
    endif
endfunction



" set escape to jk
inoremap jk <esc>
nmap <C-,> :TODOToggle<CR>
" nmap <C-r> :!python3 %<CR>
" Split fast
nnoremap <leader>\ :vs<CR>
nnoremap <leader>- :sp<CR>

" general
nnoremap <silent> <leader>gq :xa<CR>
nnoremap <silent> <leader>ge :edit $MYVIMRC<CR>
nnoremap <silent> <leader>gr :source $MYVIMRC<CR>
nnoremap <silent> <leader>q :q!<CR>

" file
nnoremap <silent> <leader>fs :w<CR>
nnoremap <silent> <leader>fb :NERDTreeToggle<CR>

" buffer
nnoremap <silent> <leader>jf :%!python3 -m json.tool<CR>
nnoremap <silent> <leader>pdb :!python3 -m pdb %<CR>
nnoremap <silent> <leader>tg :TagbarToggle<CR>

" window
nnoremap <C-h> <C-w><C-h>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>
nnoremap <C-c> <C-w><C-c>
nnoremap <C-q> <C-o>
" nnoremap <C-o> <C-w><C-o>

" code
nnoremap <silent> <leader>sc :LeaderfBufTagAll<CR>
nnoremap <silent> <leader>sfu :LeaderfFunction<CR>
nnoremap <silent> <leader>sf :LeaderfFile<CR>
nnoremap <silent> <leader>cb :TagbarToggle<CR>


" automatic open nerdtree when start up vim with a directory.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" automatic close nerdtree when only nerdtree window.
au bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
au bufenter * if 0 == len(filter(range(1, winnr('$')), 'empty(getbufvar(winbufnr(v:val), "&bt"))')) | qa! | endif
map <C-x> :call SetMouse() <CR>
"nmap <C-i> :%bd | e#<CR>

" PEP8

set tabstop=4
set softtabstop=4
set shiftwidth=4
set textwidth=99
set expandtab
set autoindent
set smartindent

" When writing a buffer.
call neomake#configure#automake('w')
" When writing a buffer, and on normal mode changes (after 750ms).
call neomake#configure#automake('nw', 750)
" When reading a buffer (after 1s), and when writing.
call neomake#configure#automake('rw', 1000)
set clipboard=unnamed
set nohlsearch
set backspace=indent,eol,start
set nowrap
set nu
set encoding=UTF-8
set langmenu=zh_CN.UTF-8
"let g:indentLine_setColors = 0
let g:indentLine_color_term = 239
set noeb
"hi Normal     ctermbg=NONE guibg=NONE
"hi LineNr     ctermbg=NONE guibg=NONE
"hi SignColumn ctermbg=NONE guibg=NONE
let g:go_version_warning = 2
let g:SuperTabRetainCompletionType = 0
let g:SuperTabDefaultCompletionType="<C-x><C-o>"

"noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
"noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
"noremap <silent> <c-n> :bn<CR>
"noremap <silent> <c-p> :bp<CR>
"需要安装字体
"brew tap caskroom/fonts
"brew cask install font-hack-nerd-font

" vim-go conf
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_types = 1
" Go 结构体成员高亮
let g:go_highlight_fields = 1
" Go 函数名高亮
let g:go_highlight_function_calls = 1
let g:pmenu_scheme = 'dark'

autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
function! s:CloseIfOnlyNerdTreeLeft()
    if exists("t:NERDTreeBufName")
        if bufwinnr(t:NERDTreeBufName) != -1
            if winnr("$") == 1
                q
            endif
        endif
    endif
endfunction

" vim-go custom mappings
au FileType go nmap <Leader>s <Plug>(coc-implementation)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
" au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>e <Plug>(go-rename)
au FileType go nmap <Leader>r <Plug>(go-referrers)


set completeopt=longest,menuone
let g:go_fmt_autosave = 1
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
let g:go_fmt_command = "goimports"
let g:airline#themes#flatlandia#palette=0

" let g:spacegray_use_italics = 1
" let g:spacegray_underline_search = 1
" let g:spacegray_low_contrast = 1


function! DeleteAllBuffersInWindow()
let s:curWinNr = winnr()
    if winbufnr(s:curWinNr) == 1
    ret
endif
    let s:curBufNr = bufnr("%")
    exe "bn"
    let s:nextBufNr = bufnr("%")
    while s:nextBufNr != s:curBufNr
        exe "bn"
        exe "bdel ".s:nextBufNr
        let s:nextBufNr = bufnr("%")
    endwhile
endfun

map <leader>bda     :call DeleteAllBuffersInWindow()

" nerdtree icons conf
" let g:webdevicons_enable = 1
" let g:webdevicons_enable_nerdtree = 1
" let g:webdevicons_enable_ctrlp = 1
" let g:tagbar_autopreview = 1
" au filetype go inoremap <buffer> . .<C-x><C-o>

let NERDTreeIgnore=['\.pyc','\~$','\.swp']
" 打开 vim 文件及显示书签列表
let NERDTreeShowBookmarks=2

" 在终端启动vim时，共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

"let g:NERDTreeIndicatorMapCustom = {
"    \ "Modified"  : "✹",
"    \ "Staged"    : "✚",
"    \ "Untracked" : "✭",
"    \ "Renamed"   : "➜",
"    \ "Unmerged"  : "═",
"    \ "Deleted"   : "✖",
"    \ "Dirty"     : "✗",
"    \ "Clean"     : "✔︎",
"    \ 'Ignored'   : '☒',
"    \ "Unknown"   : "?"
"    \ }

"let g:NERDTreeShowIgnoredStatus = 1



" 有道翻译
vnoremap <silent> <C-T> :<C-u>Ydv<CR>
nnoremap <silent> <C-T> :<C-u>Ydc<CR>
noremap <leader>yd :<C-u>Yde<CR>

" -------------------------------------------------------------------------------------------------
" coc.nvim default settings
" -------------------------------------------------------------------------------------------------

" if hidden is not set, TextEdit might fail.
set hidden
" Better display for messages
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use U to show documentation in preview window
nnoremap <silent> U :call <SID>show_documentation()<CR>

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
